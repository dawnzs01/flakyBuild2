print(job)

job['notebook_params'] = {}
runs_api = RunsApi(api_client) 
jobRun = jobs_api.run_now(job['job_id'], None, None, None, None)
print(jobRun)




# seconds to sleep between checks
sleep_seconds = 30
start_time = time.time()

# loop indefinitely
while True:
    
    # retrieve job info
    resp = runs_api.get_run(jobRun['run_id'])
    
    #calculate elapsed seconds
    elapsed_seconds = int(time.time()-start_time)
    
    # get job lfe cycle state
    life_cycle_state = resp['state']['life_cycle_state']
    
    # if terminated, then get result state & break loop
    if life_cycle_state == 'TERMINATED':
        result_state = resp['state']['result_state']
        break
        
    # else, report to user and sleep
    else:
        if elapsed_seconds > 0:
            print(f'Job in {life_cycle_state} state at { elapsed_seconds } seconds since launch.  Waiting {sleep_seconds} seconds before checking again.', end='\r')
            time.sleep(sleep_seconds)

# return results
print(f'Job completed in {result_state} state after { elapsed_seconds } seconds.  Please proceed with next steps to process the records identified by the job.')
print('\n')        