/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2023 The JReleaser authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'com.github.johnrengelman.shadow'
    id 'application'
    id 'org.moditect.gradleplugin'
}

application {
    mainClass = 'org.jreleaser.tool.JReleaser'
    // shadow complains if this is not set
    mainClassName = 'org.jreleaser.tool.JReleaser'
}

config {
    info {
        bytecodeVersion = project.findProperty('targetCompatibility')
    }
    docs {
        javadoc {
            empty = true
        }
    }
}

configurations {
    uberjar
}

dependencies {
    uberjar project(':jreleaser')
    uberjar project(':jreleaser-graalvm-sdk')

    compileOnly "org.kordamp.jipsy:jipsy-annotations:${jipsyVersion}"
    annotationProcessor "org.kordamp.jipsy:jipsy-processor:${jipsyVersion}"
}

sourceSets {
    main {
        compileClasspath += configurations.uberjar
        runtimeClasspath += compileClasspath
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.uberjar]
    }
}

addMainModuleInfo {
    version = project.version
    jvmVersion = targetCompatibility
    overwriteExistingFiles = true
    jdepsExtraArgs = ['-q']
    module {
        mainClass = application.mainClass.get()
        moduleInfoFile = file('src/java11/module-info.java')
    }
}

shadowJar {
    configurations    = [project.configurations.uberjar]
    archiveBaseName   = project.name
    archiveClassifier = ''
    mergeServiceFiles()
    exclude 'module-info.class'
    exclude '**/module-info.class'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/plexus/**'
    exclude 'META-INF/m2e/**'
    exclude 'plugin.xml'
}

task relocateShadowJar(type: org.jreleaser.gradle.shadow.ConfigureShadowRelocation) {
    target = tasks.shadowJar
    exclude('zstd-jni')
    exclude('jreleaser-logger-api')
    exclude('jreleaser-model-api')
    exclude('jreleaser-resource-bundle')
    exclude('jreleaser-utils')
    exclude('jreleaser-templates')
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

jar.finalizedBy shadowJar
addMainModuleInfo.mustRunAfter(shadowJar)

tasks.withType(JavaCompile) { JavaCompile c ->
    c.sourceCompatibility = JavaVersion.VERSION_11
    c.targetCompatibility = JavaVersion.VERSION_11
}

task versionFile {
    inputs.property('version', project.version)
    outputs.file(project.layout.buildDirectory.file('VERSION'))
    doLast {
        project.layout.buildDirectory.file('VERSION').get().asFile.text = project.version
    }
}

classes.dependsOn(versionFile)