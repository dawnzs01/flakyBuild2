/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 // Author : @mvssgupta
 
 
 /*
 Intution of solution :
 
  traversing the BST in inorder and comparing the elements to check whether they 
  are in our specified range (low and high) or not, if they are as per our 
  requirements the simply add them to the sum variable.
 
 */
 
 
class Solution {
public:
    int sum,l,r;
    void RangeSumOfBST(TreeNode* node)  //InOrder travesing 
    {
        if(node!=nullptr)
        {
            RangeSumOfBST(node->left);  

            //checking whether the node's val is as per our requirements or not
            if(node->val >= l && node->val<=r) sum+=node->val;  

            RangeSumOfBST(node->right);
        }
    }
    int rangeSumBST(TreeNode* root, int low, int high) {
        sum=0,l=low,r=high;     //l is lowest value and r is the highest value allowed
        RangeSumOfBST(root);
        return sum;
    }
};
