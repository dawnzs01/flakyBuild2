SET NAMES utf8mb4;
CREATE DATABASE IF NOT EXISTS `job_crontab` DEFAULT CHARACTER SET utf8mb4;
USE job_crontab;

/**
  业务定时任务信息存储表

  用于存储用户创建的定时任务信息
 */
CREATE TABLE IF NOT EXISTS `cron_job`
(
    `id`                  bigint(20) unsigned NOT NULL AUTO_INCREMENT,
    `row_create_time`     datetime            NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `row_update_time`     datetime            NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    `app_id`              bigint(20) unsigned NOT NULL,
    `name`                varchar(512)        NOT NULL,
    `creator`             varchar(128)        NOT NULL,
    `task_template_id`    bigint unsigned              DEFAULT NULL,
    `task_plan_id`        bigint(20) unsigned          DEFAULT NULL,
    `script_id`           char(32)                     DEFAULT NULL,
    `script_version_id`   bigint(20) unsigned          DEFAULT NULL,
    `cron_expression`     varchar(512)                 DEFAULT NULL,
    `execute_time`        bigint(20) unsigned          DEFAULT NULL,
    `variable_value`      longtext            NOT NULL,
    `last_execute_status` tinyint(2) unsigned NOT NULL DEFAULT '0',
    `is_enable`           tinyint(1) unsigned NOT NULL DEFAULT '0',
    `is_deleted`          tinyint(1) unsigned NOT NULL DEFAULT '0',
    `create_time`         bigint(20) unsigned NOT NULL,
    `last_modify_user`    varchar(128)        NOT NULL,
    `last_modify_time`    bigint(20) unsigned NOT NULL DEFAULT '0',
    `end_time`            bigint(20) unsigned NOT NULL DEFAULT '0',
    `notify_offset`       bigint(20) unsigned NOT NULL DEFAULT '0',
    `notify_user`         varchar(2048)                DEFAULT NULL,
    `notify_channel`      varchar(1024)                DEFAULT NULL,
    PRIMARY KEY (`id`),
    KEY `idx_name` (`name`) USING BTREE,
    KEY `idx_creator` (`creator`) USING BTREE,
    KEY `idx_app_id` (`app_id`) USING BTREE,
    KEY `idx_task_plan_id` (`task_plan_id`) USING BTREE
) ENGINE = InnoDB
  AUTO_INCREMENT = 1000000
  DEFAULT CHARSET = utf8mb4;

/**
  业务定时任务执行历史

  用于存储业务定时任务每次触发的执行记录
 */
CREATE TABLE IF NOT EXISTS `cron_job_history`
(
    `id`              bigint(20) unsigned NOT NULL AUTO_INCREMENT,
    `row_create_time` datetime            NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `row_update_time` datetime            NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    `app_id`          bigint(20) unsigned NOT NULL COMMENT '业务id',
    `cron_job_id`     bigint(20) unsigned NOT NULL COMMENT '所属作业id',
    `status`          tinyint(2) unsigned NOT NULL,
    `scheduled_time`  bigint(20) unsigned NOT NULL,
    `start_time`      bigint(20) unsigned NOT NULL,
    `finish_time`     bigint(20) unsigned          DEFAULT NULL,
    PRIMARY KEY (`id`),
    UNIQUE KEY `uk_cron_job_id_scheduled_time` (`cron_job_id`, `scheduled_time`) USING BTREE,
    KEY `idx_app_id` (`app_id`) USING BTREE,
    KEY `idx_cron_job_id` (`cron_job_id`) USING BTREE
) ENGINE = InnoDB
  DEFAULT CHARSET = utf8mb4;

/**
  内部定时任务执行历史

  用于存储内部定时任务每次触发的执行记录
 */
CREATE TABLE IF NOT EXISTS `inner_cron_job_history`
(
    `id`              bigint(20) unsigned NOT NULL AUTO_INCREMENT,
    `row_create_time` datetime            NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `row_update_time` datetime            NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    `system_id`       char(32)            NOT NULL,
    `job_key`         char(32)            NOT NULL,
    `status`          tinyint(2) unsigned NOT NULL,
    `scheduled_time`  bigint(20) unsigned NOT NULL,
    `start_time`      bigint(20) unsigned NOT NULL,
    `finish_time`     bigint(20) unsigned          DEFAULT NULL,
    PRIMARY KEY (`id`),
    UNIQUE KEY `uk_system_id_job_key_scheduled_time` (`system_id`, `job_key`, `scheduled_time`) USING BTREE,
    KEY `idx_system_id` (`system_id`) USING BTREE,
    KEY `idx_job_key` (`job_key`) USING BTREE
) ENGINE = InnoDB
  DEFAULT CHARSET = utf8mb4;

/**
  以下均为 Quartz 自带表结构
 */
CREATE TABLE IF NOT EXISTS QRTZ_JOB_DETAILS
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    JOB_NAME          VARCHAR(190) NOT NULL,
    JOB_GROUP         VARCHAR(190) NOT NULL,
    DESCRIPTION       VARCHAR(250) NULL,
    JOB_CLASS_NAME    VARCHAR(250) NOT NULL,
    IS_DURABLE        VARCHAR(1)   NOT NULL,
    IS_NONCONCURRENT  VARCHAR(1)   NOT NULL,
    IS_UPDATE_DATA    VARCHAR(1)   NOT NULL,
    REQUESTS_RECOVERY VARCHAR(1)   NOT NULL,
    JOB_DATA          BLOB         NULL,
    PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP),
    INDEX `IDX_QRTZ_J_REQ_RECOVERY`(SCHED_NAME, REQUESTS_RECOVERY),
    INDEX `IDX_QRTZ_J_GRP`(SCHED_NAME, JOB_GROUP)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_TRIGGERS
(
    SCHED_NAME     VARCHAR(120) NOT NULL,
    TRIGGER_NAME   VARCHAR(190) NOT NULL,
    TRIGGER_GROUP  VARCHAR(190) NOT NULL,
    JOB_NAME       VARCHAR(190) NOT NULL,
    JOB_GROUP      VARCHAR(190) NOT NULL,
    DESCRIPTION    VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT(13)   NULL,
    PREV_FIRE_TIME BIGINT(13)   NULL,
    PRIORITY       INTEGER      NULL,
    TRIGGER_STATE  VARCHAR(16)  NOT NULL,
    TRIGGER_TYPE   VARCHAR(8)   NOT NULL,
    START_TIME     BIGINT(13)   NOT NULL,
    END_TIME       BIGINT(13)   NULL,
    CALENDAR_NAME  VARCHAR(190) NULL,
    MISFIRE_INSTR  SMALLINT(2)  NULL,
    JOB_DATA       BLOB         NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS (SCHED_NAME, JOB_NAME, JOB_GROUP),
    INDEX `IDX_QRTZ_T_J`(SCHED_NAME, JOB_NAME, JOB_GROUP),
    INDEX `IDX_QRTZ_T_JG`(SCHED_NAME, JOB_GROUP),
    INDEX `IDX_QRTZ_T_C`(SCHED_NAME, CALENDAR_NAME),
    INDEX `IDX_QRTZ_T_G`(SCHED_NAME, TRIGGER_GROUP),
    INDEX `IDX_QRTZ_T_STATE`(SCHED_NAME, TRIGGER_STATE),
    INDEX `IDX_QRTZ_T_N_STATE`(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_STATE),
    INDEX `IDX_QRTZ_T_N_G_STATE`(SCHED_NAME, TRIGGER_GROUP, TRIGGER_STATE),
    INDEX `IDX_QRTZ_T_NEXT_FIRE_TIME`(SCHED_NAME, NEXT_FIRE_TIME),
    INDEX `IDX_QRTZ_T_NFT_ST`(SCHED_NAME, TRIGGER_STATE, NEXT_FIRE_TIME),
    INDEX `IDX_QRTZ_T_NFT_MISFIRE`(SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME),
    INDEX `IDX_QRTZ_T_NFT_ST_MISFIRE`(SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_STATE),
    INDEX `IDX_QRTZ_T_NFT_ST_MISFIRE_GRP`(SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_GROUP, TRIGGER_STATE)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_SIMPLE_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL,
    TRIGGER_NAME    VARCHAR(190) NOT NULL,
    TRIGGER_GROUP   VARCHAR(190) NOT NULL,
    REPEAT_COUNT    BIGINT(7)    NOT NULL,
    REPEAT_INTERVAL BIGINT(12)   NOT NULL,
    TIMES_TRIGGERED BIGINT(10)   NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_CRON_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL,
    TRIGGER_NAME    VARCHAR(190) NOT NULL,
    TRIGGER_GROUP   VARCHAR(190) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID    VARCHAR(80),
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_SIMPROP_TRIGGERS
(
    SCHED_NAME    VARCHAR(120)   NOT NULL,
    TRIGGER_NAME  VARCHAR(190)   NOT NULL,
    TRIGGER_GROUP VARCHAR(190)   NOT NULL,
    STR_PROP_1    VARCHAR(512)   NULL,
    STR_PROP_2    VARCHAR(512)   NULL,
    STR_PROP_3    VARCHAR(512)   NULL,
    INT_PROP_1    INT            NULL,
    INT_PROP_2    INT            NULL,
    LONG_PROP_1   BIGINT         NULL,
    LONG_PROP_2   BIGINT         NULL,
    DEC_PROP_1    NUMERIC(13, 4) NULL,
    DEC_PROP_2    NUMERIC(13, 4) NULL,
    BOOL_PROP_1   VARCHAR(1)     NULL,
    BOOL_PROP_2   VARCHAR(1)     NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_BLOB_TRIGGERS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_NAME  VARCHAR(190) NOT NULL,
    TRIGGER_GROUP VARCHAR(190) NOT NULL,
    BLOB_DATA     BLOB         NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    INDEX (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_CALENDARS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    CALENDAR_NAME VARCHAR(190) NOT NULL,
    CALENDAR      BLOB         NOT NULL,
    PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_PAUSED_TRIGGER_GRPS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_GROUP VARCHAR(190) NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_FIRED_TRIGGERS
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    ENTRY_ID          VARCHAR(95)  NOT NULL,
    TRIGGER_NAME      VARCHAR(190) NOT NULL,
    TRIGGER_GROUP     VARCHAR(190) NOT NULL,
    INSTANCE_NAME     VARCHAR(190) NOT NULL,
    FIRED_TIME        BIGINT(13)   NOT NULL,
    SCHED_TIME        BIGINT(13)   NOT NULL,
    PRIORITY          INTEGER      NOT NULL,
    STATE             VARCHAR(16)  NOT NULL,
    JOB_NAME          VARCHAR(190) NULL,
    JOB_GROUP         VARCHAR(190) NULL,
    IS_NONCONCURRENT  VARCHAR(1)   NULL,
    REQUESTS_RECOVERY VARCHAR(1)   NULL,
    PRIMARY KEY (SCHED_NAME, ENTRY_ID),
    INDEX `IDX_QRTZ_FT_TRIG_INST_NAME`(SCHED_NAME, INSTANCE_NAME),
    INDEX `IDX_QRTZ_FT_INST_JOB_REQ_RCVRY`(SCHED_NAME, INSTANCE_NAME, REQUESTS_RECOVERY),
    INDEX `IDX_QRTZ_FT_J_G`(SCHED_NAME, JOB_NAME, JOB_GROUP),
    INDEX `IDX_QRTZ_FT_JG`(SCHED_NAME, JOB_GROUP),
    INDEX `IDX_QRTZ_FT_T_G`(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    INDEX `IDX_QRTZ_FT_TG`(SCHED_NAME, TRIGGER_GROUP)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_SCHEDULER_STATE
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    INSTANCE_NAME     VARCHAR(190) NOT NULL,
    LAST_CHECKIN_TIME BIGINT(13)   NOT NULL,
    CHECKIN_INTERVAL  BIGINT(13)   NOT NULL,
    PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
)
    ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS QRTZ_LOCKS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME  VARCHAR(40)  NOT NULL,
    PRIMARY KEY (SCHED_NAME, LOCK_NAME)
)
    ENGINE = InnoDB;


commit;
