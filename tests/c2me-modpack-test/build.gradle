import com.ishland.c2me.gradle.ModpackConfig
import com.ishland.c2me.gradle.RedirectingOutputStream

evaluationDependsOn(":tests")
evaluationDependsOn(":tests:test-mod")

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    runs {
        testC2MEModpackServer {
            server()
            runDir getRootProject().getProjectDir().toPath().relativize(project.getBuildDir().toPath()).resolve("testServer").toString()
            source sourceSets.testmod
            vmArgs "-Dcom.ishland.c2me.common.config.threadedWorldGen.reduceLockRadius=true",
                    "-Dcom.ishland.c2me.common.config.threadedWorldGen.enabled=true",
                    "-Dcom.ishland.c2me.common.config.threadedWorldGen.useGlobalBiomeCache=true",
                    "-Dcom.ishland.c2me.common.config.asyncScheduling.enabled=true",
                    "-Dcom.ishland.c2me.common.config.noTickViewDistance.enabled=true",
                    "--add-modules jdk.incubator.vector"
            vmArgs "-Dcom.ishland.c2me.mixin.doAudit=true"
            if (System.getenv("GITHUB_WORKFLOW") != null) {
                if (System.getenv("RUNNER_OS").equals("macOS")) {
                    vmArgs "-Xmx11G"
                } else if (System.getenv("RUNNER_OS").equals("Linux")) {
                    vmArgs "-Xmx5G"
                }
            }
        }
    }
}

runTestC2MEModpackServer.configure {
    doFirst {
        standardOutput = new RedirectingOutputStream(project, getName())
    }
    onlyIf {
        !getRootProject().getProjectDir().toPath().relativize(project.getBuildDir().toPath()).resolve("testServer").toFile().isDirectory()
    }
}

migrateMappings.onlyIf { false }

dependencies {
    testmodImplementation project(":tests:test-mod").sourceSets.main.output
    testmodImplementation project(":").sourceSets.main.output
    testmodImplementation project(":").configurations.getByName("includeApi").allDependencies
    testmodImplementation project(":").configurations.getByName("shadowImpl").allDependencies
    testmodImplementation project(":").configurations.getByName("shadowRuntime").allDependencies
    ModpackConfig.applyModpack(it)
}

test {
    useJUnitPlatform()
}
